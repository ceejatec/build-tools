#!/usr/bin/env python3

"""
Program that takes a given manifest and repository in that manifest,
then updates all its submodules and updates the manifest itself with
any new revisions for any of the submodules.

Requires the lxml module, installable via 'pip', along with Git, which
needs to be in one's path so subprocess can find it..
"""

import argparse
import os
import subprocess
import sys
import re

from lxml import etree
from manifest_util import remember_cwd


class UpdateManifest:
    """
    In a given manifest, update the SHAs for the submodules for a given repo
    """

    def __init__(self, manifest, repos):
        """Initialize parameters for metadata storage"""

        self.manifest = manifest
        self.repos = repos
        self.data = None
        self.tree = None
        self.root = None
        self.remotes = None
        self.projects = None
        self.default_revision = "master"

        self.sha_re = re.compile(r"[a-f0-9]{40}")

    def get_default(self):
        """Acquires the default value for revision"""

        for default in self.tree.findall('default'):
            self.default_revision = default.get('revision')

    def get_remotes(self):
        """Acquire the Git remotes for the repositories"""

        remotes = dict()

        for remote in self.tree.findall('remote'):
            remote_name = remote.get('name')
            remote_url = remote.get('fetch')

            # Skip incomplete/invalid remotes
            if remote_name is None or remote_url is None:
                continue

            remotes[remote_name] = remote_url

        # Get default remote, if there is one
        for remote in self.tree.findall('default'):
            remote_name = remote.get('remote')

            if remote_name is None:
                continue

            remotes['default'] = remotes[remote_name]

        self.remotes = remotes

    def get_projects(self):
        """Acquire information for repositories in manifest"""

        projects = dict()

        for project in self.tree.findall('project'):
            project_name = project.get('name')
            project_remote = project.get('remote')
            project_revision = project.get('revision')
            # Default path is the project's name
            project_path = project.get('path', project_name)

            # Skip incomplete/invalid projects
            if project_name is None:
                continue

            projects[project_name] = {
                'remote': project_remote,
                'revision': project_revision,
                'path': project_path,
            }

        self.projects = projects

    def get_metadata(self):
        """
        Parse and extract information for the remotes and projects,
        needed to retrieve the repository and submodules to be updated
        """

        with open(self.manifest) as fh:
            self.data = etree.XML(fh.read().encode('utf-8'))

        self.tree = etree.ElementTree(self.data)
        self.root = self.tree.getroot()

        self.get_default()
        self.get_remotes()
        self.get_projects()

    def checkout_repo(self, repo_name):
        """
        Clone the given repository and checkout a specific revision
        if one is supplied; abort if the repository is unavailable
        or if the revision does not exist

        Uses subprocess to call out to Git and suppresses standard
        error output to minimize output noise while running
        """

        try:
            remote = self.remotes[self.projects[repo_name]['remote']]
        except KeyError:
            # Get default remote
            remote = self.remotes['default']

        repo_url = '{}{}'.format(remote, repo_name)
        repo_path = self.projects[repo_name]['path']

        if not os.path.exists(repo_path):
            try:
                print('Cloning {}...'.format(repo_name))
                subprocess.check_call(
                    ['git', 'clone', '-q', repo_url, repo_path]
                )
            except subprocess.CalledProcessError:
                print(
                    'Unable to clone repo "{}", aborting...'.format(repo_name)
                )
                sys.exit(1)

        with remember_cwd():
            os.chdir(repo_path)
            print('Updating git repository {}...'.format(repo_name))
            subprocess.check_call(
                ['git', 'fetch', '--all', '-q']
            )

            revision = self.projects[repo_name]['revision']
            if revision is None:
                revision = self.default_revision
            print(
                'Checking out revision {} in {}'.format(revision, repo_name)
            )

            try:
                if self.sha_re.match(revision) is not None:
                    subprocess.check_call(
                        ['git', 'checkout', '-q', revision]
                    )
                else:
                    subprocess.check_call(
                        ['git', 'checkout', '-q', '-B',
                            revision, "origin/{}".format(revision)]
                    )
            except subprocess.CalledProcessError:
                print('Unable to check out revision "{}" from repo "{}", '
                      'aborting...'.format(revision, repo_name))
                sys.exit(1)

        return True

    def update_submodules(self, repo_name):
        """
        Update all submodules in the repo, ensuring it succeeds
        (abort otherwise)
        """
        with remember_cwd():
            os.chdir(self.projects[repo_name]['path'])
            try:
                print('Syncing submodules in {}...'.format(repo_name))
                subprocess.check_call(
                    ['git', 'submodule', 'sync', '--recursive']
                )
                print('Updating submodules in {}...'.format(repo_name))
                subprocess.check_call(
                    ['git', 'submodule', 'update', '--init', '--recursive']
                )
            except subprocess.CalledProcessError:
                print('Unable to update submodules in repo "{}", '
                      'aborting...'.format(repo_name))
                sys.exit(1)

    def update_shas(self):
        """
        Acquire submodule information and update the XML tree with the new
        revisions for all the submodules; abort if any of the submodule
        paths can't be found in the manifest
        """

        print('Updating manifest from current submodules...')
        with remember_cwd():
            os.chdir(self.projects[self.repos[0]]['path'])
            try:
                resp = subprocess.check_output(
                    ['git', 'submodule', 'status', '--recursive']
                )
            except subprocess.CalledProcessError:
                print('Unable to acquire submodule info for repo "{}", '
                      'aborting...'.format(self.repos[0]))
                sys.exit(1)

        submod_info = resp.decode('utf-8')

        for submod in submod_info.split('\n'):
            # Small hack to avoid blank lines
            try:
                revision, path, _ = submod.split()
                # Strip leading status indicator character
                revision = revision[-40:]
            except ValueError:
                continue

            # Note: We assume the first repo specified on the command line
            # is the "parent" of any others, and hence the path in the
            # manifest must be nested below that one. That's a limitation.
            base_path = self.projects[self.repos[0]]['path']
            project = self.tree.xpath(
                '//project[@path="{}/{}"]'.format(base_path, path))
            if len(project) == 0:
                print('Unable to find project with path "{}/{}", '
                      'aborting...'.format(base_path, path))
                sys.exit(1)
            project = project[0]

            # Only update manifest elements that are currently locked to SHAs
            project_revision = project.get('revision')
            if project_revision is None:
                project_revision = self.default_revision
            if self.sha_re.match(project_revision) is not None:
                if project_revision != revision:
                    print('UPDATING {} from {} to {}!'.format(
                        project.get('name'), project_revision, revision
                    ))
                project.set('revision', revision)
            elif project.get('name') not in self.repos:
                print(
                    'Manifest project {} is on a branch and was not '
                    'specified as a branch project!'.format(
                        project.get('name'))
                )
                sys.exit(2)

    def generate_xml(self):
        """
        Write the XML tree back out to a file
        """

        print('Writing result manifest!')
        with open(self.manifest, 'w') as fh:
            fh.write('<?xml version="1.0" encoding="UTF-8"?>\n')
            fh.write(etree.tostring(
                self.tree, encoding='unicode', pretty_print=True
            ))

    def update_manifest(self):
        """
        Check out given repository, update submodules and update SHA
        entries in the XML tree, creating a new manifest file
        """

        for repo in self.repos:
            self.checkout_repo(repo)
            self.update_submodules(repo)
        self.update_shas()
        self.generate_xml()


def main():
    """
    Parse the command line, acquire the repositories and create
    the archive file
    """

    parser = argparse.ArgumentParser(
        description='Update submodule SHAs in given manifest'
    )
    parser.add_argument('manifest', help='Full path to manifest')
    parser.add_argument('repos', nargs='+', help='Name of Git repository')

    args = parser.parse_args()

    backup = UpdateManifest(os.path.realpath(args.manifest), args.repos)
    backup.get_metadata()
    backup.update_manifest()


if __name__ == '__main__':
    main()
