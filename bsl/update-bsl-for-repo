#!/bin/bash -e
#
# Checks and updates a single repository's BSL license.
#

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${SCRIPT_DIR}/../utilities/shell-utils.sh

# Exit conditions

# BSL license already exists, but is for different product
ERR_WRONG_LICENSED_WORK=2

# BSL license information needs updating, but project is locked to SHA
ERR_PROJECT_LOCKED=3

# BSL license information needs updating, but project is on main/master branch
ERR_MAIN_BRANCH=4

usage() {
    echo "Usage: $(basename $0) -p PRODUCT -v VERSION -d CHANGE_DATE [-n] [-u] [-l]"
    echo "  -n - dry run; report any possible problems but don't push changes"
    echo "  -l - licenses only; do not update source code header comments"
    echo "  -m - allow changes to main/master/unstable branch (normally only updates release branches)"
    exit 1
}

# Default values for arguments - Overriding REPOSITORY and BRANCH via options
# is only for testing/debugging.
DRY_RUN=false
UPDATE_COMMENTS=true
ALLOW_MAIN=false
REPOSITORY=${REPO_PROJECT}
BRANCH=${REPO_RREV}
while getopts ":p:v:d:r:b:c:mnl" opt; do
    case ${opt} in
        p)
            PRODUCT=${OPTARG}
            ;;
        v)
            VERSION=${OPTARG}
            ;;
        d)
            CHANGE_DATE=${OPTARG}
            ;;
        r)
            REPOSITORY=${OPTARG}
            ;;
        b)
            BRANCH=${OPTARG}
            ;;
        c)
            cd "${OPTARG}"
            ;;
        m)
            ALLOW_MAIN=true
            ;;
        n)
            DRY_RUN=true
            ;;
        l)
            UPDATE_COMMENTS=false
            ;;
        \?)
            usage
            ;;
        :)
            echo "-${OPTARG} requires an argument"
            usage
            ;;
    esac
done

chk_set PRODUCT
chk_set VERSION
chk_set CHANGE_DATE

if [ ! -e ".git" ]; then
    echo "Please run from top level of git repository, or specify path"
    echo "to git repository using -c"
    usage
fi

# Special sauce for projects that upload changes to different branches
if [ ! -z "${REPO_DEST_BRANCH}" ]; then
    status ${REPOSITORY} uploads to ${REPO_DEST_BRANCH} branch, switching...
    git checkout -B "${REPO_DEST_BRANCH}" ${REPO_REMOTE}/${REPO_DEST_BRANCH}
    BRANCH=${REPO_DEST_BRANCH}
fi

LIC_DIR=licenses
BSL_LIC=${LIC_DIR}/BSL-Couchbase.txt
APACHE_LIC=${LIC_DIR}/APL2.txt
TOP_LIC=LICENSE.txt

status Checking repository $(pwd)

# Delete ALL top-level existing license files (our LICENSE.txt will be
# replaced next)
find . -maxdepth 1 -type f -iname \*license\* | xargs --no-run-if-empty git rm >& /dev/null

# Ensure top-level generic LICENSE.txt exists and is correct
cp "${SCRIPT_DIR}/assets/LICENSE.txt" ${TOP_LIC}
git add ${TOP_LIC}

# Ensure enclosed Apache license exists and is correct
mkdir -p ${LIC_DIR}
cp "${SCRIPT_DIR}/assets/APL2.txt" ${APACHE_LIC}
git add ${APACHE_LIC}

# If BSL license already exists, ensure it is for correct product/version/change date.
# Keep track of whether we will need to change anything.
NEEDS_CHANGE=false
if [ -e ${BSL_LIC} ]; then
    WORK_LINE_RE="^Licensed Work:  (.*) Version (.*)"
    current_work_line=$(grep -E "${WORK_LINE_RE}" ${BSL_LIC})
    [[ "${current_work_line}" =~ ${WORK_LINE_RE} ]]
    current_product=${BASH_REMATCH[1]}
    current_version=${BASH_REMATCH[2]}

    if [ "${current_product}" != "${PRODUCT}" ]; then
        status Current BSL Product is ${current_product}, not ${PRODUCT}!
        exit ${ERR_WRONG_LICENSED_WORK}
    fi

    if [ "${current_version}" != "${VERSION}" ]; then
        status Current BSL Version is ${current_version} - will overwrite with ${VERSION}
        NEEDS_CHANGE=true
    fi

    CHANGE_LINE_RE="^Change Date:  (.*)"
    current_change_line=$(grep -E "${CHANGE_LINE_RE}" ${BSL_LIC})
    [[ "${current_change_line}" =~ ${CHANGE_LINE_RE} ]]
    current_change_date=${BASH_REMATCH[1]}

    if [ "${current_change_date}" != "${CHANGE_DATE}" ]; then
        status Current BSL Change Date is ${current_change_date} - will overwrite with ${CHANGE_DATE}
        NEEDS_CHANGE=true
    fi
fi

# Now check the manifest for certain problems, if we know we need to
# make changes
if ${NEEDS_CHANGE}; then
    # Make sure that there's an upstream branch to push to; if this project
    # is locked to a SHA, there's a problem
    if [[ ${BRANCH} =~ ^[0-9a-f]{40}$ ]]; then
        status "ERROR: ${REPOSITORY} has licence changes but is locked to SHA ${BRANCH}!"
        exit ${ERR_PROJECT_LOCKED}
    fi

    if ! ${ALLOW_MAIN} && [[ "${BRANCH}" == "main" || "${BRANCH}" == "master" || "${BRANCH}" == "unstable" ]]; then
        status "ERROR: ${REPOSITORY} has licence changes but is on '${BRANCH}' branch!"
        status "Add annotation 'BSL_MAIN_OK' = 'true' to the manifest to allow this."
        exit ${ERR_MAIN_BRANCH}
    fi
fi

# Alright, all error checking done! Now we can make changes.

# Create/Overwrite BSL license to fix Work and Change Date
cat "${SCRIPT_DIR}/assets/BSL-Couchbase.txt.tmpl" \
    | sed -e "s/@@PRODUCT@@/${PRODUCT}/" \
    | sed -e "s/@@VERSION@@/${VERSION}/" \
    | sed -e "s/@@CHANGE_DATE@@/${CHANGE_DATE}/" \
    > ${BSL_LIC}
git add ${BSL_LIC}

# Inject/Update license headers
if ${UPDATE_COMMENTS}; then
    target_license=bsl node ${SCRIPT_DIR}/../license-injector/app.js .
fi
[ -f ".copyrightignore" ] && git add .copyrightignore

# If we made any changes, commit them (or report if dry-run)
if [ -z "$(git status --porcelain)" ]; then
    status "${REPOSITORY} repository clean - no BSL changes necessary!"
else
    if ${DRY_RUN}; then
        status "${REPOSITORY} (${BRANCH}) has the following changes to commit (will be reset):"
        git status --short
        git reset --hard >& /dev/null
    else
        status "Committing BSL changes to repository ${REPOSITORY} (${BRANCH}):"
        git commit -am "CBD-6163: BSL License updates - ${PRODUCT} Version ${VERSION}"
        git push ssh://review.couchbase.org:29418/${REPOSITORY} "HEAD:refs/for/${BRANCH}%topic=bsl_updates"
    fi
fi
